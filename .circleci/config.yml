# Use the latest 2.1 version of CircleCI pipeline processing engine, see https://circleci.com/docs/2.0/configuration-reference/
#version: 2.1

###############################################################################################################
## Use a package of configuration called an orb, see https://circleci.com/docs/2.0/orb-intro/
#orbs:
#  # Declare a dependency on the welcome-orb
#  welcome: circleci/welcome-orb@0.3.1
#
## Orchestrate or schedule a set of jobs, see https://circleci.com/docs/2.0/workflows/
#workflows:
#  # Name the workflow "Welcome"
#  Welcome:
#    # Run the welcome/run job in its own container
#    jobs:
#      - welcome/run
###############################################################################################################

###############################################################################################################
#jobs:
#  build:
#    docker:
#      - image: circleci/node:4.8.2
#    steps:
#      - checkout
#      - run: echo "hello world"
###############################################################################################################

version: 2

workflows:
  version: 2
  dist-compile:
    jobs:
      - compile
      - link:
          requires: 
            - compile


jobs:

  compile:
    parallelism: 2
    docker:
      - image: gcc:8.2
    steps:
      - checkout
      #split all c files based on the index ID we're running on, pass subset to gcc compile
#      - run: circleci tests glob "**/*.c" | circleci tests split --split-by=filesize | xargs gcc -c 
      - run: circleci tests glob "Codes/*.c" | circleci tests split --split-by=filesize | xargs gcc -c 
      # move compiled files to specific folder and persist to workspace
      - run: mkdir output && mv *.o output
      - persist_to_workspace:
          root: output
          paths:
            - "*.o"

  link:
    docker:
      - image: gcc:8.2
    steps:
      # instead of checking out, restore workspace (will merge all parallel containers from previous job)
      - attach_workspace:
          at: output
      - run: ls -la output
      - run: mv output/* .
      # link the compiled files into an executable
      - run: gcc -o program *.o
      # confirm program exists and is executable
      - run: ls -la
      - run: ./program
      # persist as artifact
      - store_artifacts:
          path: program


