# Use the latest 2.1 version of CircleCI pipeline processing engine, see https://circleci.com/docs/2.0/configuration-reference/
#version: 2.1

###############################################################################################################
## Use a package of configuration called an orb, see https://circleci.com/docs/2.0/orb-intro/
#orbs:
#  # Declare a dependency on the welcome-orb
#  welcome: circleci/welcome-orb@0.3.1
#
## Orchestrate or schedule a set of jobs, see https://circleci.com/docs/2.0/workflows/
#workflows:
#  # Name the workflow "Welcome"
#  Welcome:
#    # Run the welcome/run job in its own container
#    jobs:
#      - welcome/run
###############################################################################################################

###############################################################################################################
#jobs:
#  build:
#    docker:
#      - image: circleci/node:4.8.2
#    steps:
#      - checkout
#      - run: echo "hello world"
###############################################################################################################

###############################################################################################################
#version: 2
#
#workflows:
#  version: 2
#  dist-compile:
#    jobs:
#      - compile
#      - link:
#          requires: 
#            - compile
#
#
#jobs:
#
#  compile:
#    parallelism: 2
#    docker:
#      - image: gcc:8.2
#    steps:
#      - checkout
#      #split all c files based on the index ID we're running on, pass subset to gcc compile
##      - run: circleci tests glob "**/*.c" | circleci tests split --split-by=filesize | xargs gcc -c 
#      - run: ls ./Codes
##      - run: circleci tests glob "/Codes/parameter.c" | circleci tests split --split-by=filesize | xargs gcc -c 
#      - run: gcc ./Codes/prime.c
#      # move compiled files to specific folder and persist to workspace
#      - run: mkdir output && mv *.o output
#      - persist_to_workspace:
#          root: output
#          paths:
#            - "*.o"
#
#  link:
#    docker:
#      - image: gcc:8.2
#    steps:
#      # instead of checking out, restore workspace (will merge all parallel containers from previous job)
#      - attach_workspace:
#          at: output
#      - run: ls -la output
#      - run: mv output/* .
#      # link the compiled files into an executable
#      - run: gcc -o program *.o
#      # confirm program exists and is executable
#      - run: ls -la
#      - run: ./program
#      # persist as artifact
#      - store_artifacts:
#          path: program


version: 2.0
jobs:
  build_gcc_6:
    docker:
      - image: gcc:6
    steps:
      - checkout
#      - run: mkdir -p build && cd build
#      - run: g++ -o main main.cpp -std=c++14
      - run: pwd
      - run: ls
      - run: cd Codes
      - run: ls
#      - run: cp ../Operation/yawrate_ctl.cpp ./
      - run: pwd
#     - run: g++ ./Codes/prime.c -std=c++14
#      - run: g++ -Wall -c yawrate_ctl.cpp -std=c++14
#      - run: g++ -Wall -c test_codes.cpp  -std=c++14
#      - run: g++ -Wall -o test_codes test_codes.o yawrate_ctl.o -std=c++14



#      - run: ./main

#  build_gcc_latest:
#    docker:
#      - image: gcc:latest
#    steps:
#      - checkout
#      - run: mkdir -p build && cd build
#      - run: g++ -o main main.cpp -std=c++17
#      - run: ./main
#

workflows:
  version: 2
  build_and_test:
    jobs:
      - build_gcc_6
#      - build_gcc_latest